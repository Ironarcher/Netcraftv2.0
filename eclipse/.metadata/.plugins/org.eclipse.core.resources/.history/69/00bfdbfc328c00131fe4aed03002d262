package com.nitrogenegames.netcraft.machine;

import ic2.api.item.IElectricItem;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.util.ArrayList;
import java.util.List;

import com.nitrogenegames.netcraft.Netcraft;
import com.nitrogenegames.netcraft.gui.GuiCore;

import cpw.mods.fml.common.network.PacketDispatcher;
import cpw.mods.fml.common.network.Player;
import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.player.InventoryPlayer;
import net.minecraft.inventory.Container;
import net.minecraft.inventory.ICrafting;
import net.minecraft.inventory.Slot;
import net.minecraft.item.ItemStack;
import net.minecraft.network.packet.Packet250CustomPayload;

public class ContainerCore extends Container {

        public TileEntityCore tileEntity;
        public int energy;
        public int selected = 0;
        public int x = 25;
        public int y = 0;
        public ArrayList pagedSlot = new ArrayList();
        public ContainerCore (InventoryPlayer inventoryPlayer, TileEntityCore te){
                tileEntity = te;
                energy = te.energy;

                //the Slot constructor takes the IInventory and the slot number in that it binds to
                //and the x-y coordinates it resides on-screen
                addPageSlotToContainer(new SlotModuleCore(tileEntity, 0, 20 + this.getX(), 13 + this.getY(), 0, 1));

                addPageSlotToContainer(new SlotEnergyInput(tileEntity, 1, 91 + this.getX() + 1, 23 + this.getY() + 1, 2, 1));
                bindPlayerInventory(inventoryPlayer);
                //commonly used vanilla code that adds the player's inventory
                
        }
        @Override
        protected Slot addSlotToContainer(Slot par1Slot)
        {
        	this.addSlotToContainer(par1Slot, this.inventorySlots.size());
        	return par1Slot;
        }
        protected Slot addSlotToContainer(Slot par1Slot, int i)
        {
            par1Slot.slotNumber = i;//par1Slot.getSlotIndex();
            this.inventorySlots.add(par1Slot);
            this.inventoryItemStacks.add((Object)null);
            return par1Slot;
        }
        public void updateTab() {
    		//for(int i = 0; i < this.inventorySlots.size(); i++) {
        		/*for(int j = 0; j < this.pagedSlot.size(); j++) {
        			this.inventorySlots.remove(this.pagedSlot.get(j));
    				this.inventoryItemStacks.remove(((SlotCore) this.pagedSlot.get(j)).getStack());
        			if(((SlotCore)pagedSlot.get(j)).pageId == selected) {
        				addSlotToContainer((SlotCore)pagedSlot.get(j), ((SlotCore)pagedSlot.get(j)).slotNumber);

        			}
        		}*/
        		for(int j = 0; j < this.pagedSlot.size(); j++) {
        			if(((SlotNetcraft)pagedSlot.get(j)).pageId == selected) {
        				((SlotNetcraft)pagedSlot.get(j)).show();
        				
        			} else {
        				((SlotNetcraft)pagedSlot.get(j)).hide();
        			}
        		}
        }
        @Override
        public boolean canInteractWith(EntityPlayer player) {
                return tileEntity.isUseableByPlayer(player);
        }
        public int getX() {
        	return x;
        }
        public int getY() {
        	return y;
        }

        protected void bindPlayerInventory(InventoryPlayer inventoryPlayer) {
                for (int i = 0; i < 3; i++) {
                        for (int j = 0; j < 9; j++) {
                                addSlotToContainer(new Slot(inventoryPlayer, j + i * 9 + 9,
                                                8 + (12) + this.getX() + j * 18, this.getY() + 84 + i * 18));
                        }
                }

                for (int i = 0; i < 9; i++) {
                        addSlotToContainer(new Slot(inventoryPlayer, i, 8+ this.getX() + (12) + i * 18, this.getY() +142));
                }
        }
        /*@SideOnly(Side.CLIENT)
        public void updateProgressBar(int par1, int par2)
        {
        	this.energy = par2;
        } */
        @SideOnly(Side.SERVER)
        public void detectAndSendChanges()
        {
        	super.detectAndSendChanges();
            for (int i = 0; i < this.crafters.size(); ++i)
            {
            	//ICrafting icrafting = (ICrafting)this.crafters.get(i);
                //icrafting.sendProgressBarUpdate(this, 1, this.energy);
        		/*if(!worldObj.isRemote) {
                ByteArrayOutputStream bos = new ByteArrayOutputStream(8);
                DataOutputStream outputStream = new DataOutputStream(bos);
                try {
                        outputStream.writeInt(this.energy);
                        outputStream.writeInt(this.tileEntity.xCoord);
                        outputStream.writeInt(this.tileEntity.yCoord);
                        outputStream.writeInt(this.tileEntity.zCoord);
                } catch (Exception ex) {
                        ex.printStackTrace();
                }

                Packet250CustomPayload packet = new Packet250CustomPayload();
                packet.channel = "corepack";
                packet.data = bos.toByteArray();
                packet.length = bos.size();
                PacketDispatcher.sendPacketToPlayer(packet, (Player) crafters.get(i));
        		} */
            }
        	//this.energy = this.tileEntity.energy;
        	
        }
        public void addPageSlotToContainer(SlotNetcraft s) {
        	addSlotToContainer(s);
        	pagedSlot.add(s);
        }
        public ItemStack transferStackInSlot(EntityPlayer par1EntityPlayer, int par2)
        {
            ItemStack itemstack = null;
            Slot slot = (Slot)this.inventorySlots.get(par2);

            if (slot != null && slot.getHasStack())
            {
                ItemStack itemstack1 = slot.getStack();
                itemstack = itemstack1.copy();
                if(slot instanceof SlotNetcraft) {
                	if(((SlotNetcraft) slot).pageId != tileEntity.getTabPage()) {
                		return null;
                	}
                }
                if (par2 == 0 || par2 == 1)
                {
                    if (!this.mergeItemStack(itemstack1, 2, 29, false))
                    {
                        return null;
                    }
                }else{
                	if(tileEntity.getTabPage() == 0) {
	                    if (((Slot)this.inventorySlots.get(0)).getHasStack() || !Netcraft.isModule(itemstack))
	                    {
	                        if (par2 >= 2 && par2 <= 29)
	                        {
	                            if (!this.mergeItemStack(itemstack1, 30, 37, false))
	                            {
	                                return null;
	                            }
	                        }
	                        else if (par2 >= 30 && par2 < 38)
	                        {
	                        	if(!this.mergeItemStack(itemstack1, 2, 29, false)) {
	                        		return null;
	                        	}
	                        } else {
	                        	return null;
	                        }
	                    } else if (itemstack1.hasTagCompound() && itemstack1.stackSize == 1)
	                    {
	                        ((Slot)this.inventorySlots.get(0)).putStack(itemstack1.copy());
	                        itemstack1.stackSize = 0;
	                    } else if (itemstack1.stackSize >= 1) {
	
	                        ((Slot)this.inventorySlots.get(0)).putStack(new ItemStack(itemstack1.itemID, 1, itemstack1.getItemDamage()));
	                        --itemstack1.stackSize;
	                    } else {
	                    	return null;
	                    } 
                	} else if(tileEntity.getTabPage() == 1) {
                		
                        if (par2 >= 2 && par2 <= 29)
                        {
                            if (!this.mergeItemStack(itemstack1, 30, 37, false))
                            {
                                return null;
                            }
                        }
                        else if (par2 >= 30 && par2 < 38)
                        {
                        	if(!this.mergeItemStack(itemstack1, 2, 29, false)) {
                        		return null;
                        	}
                        } else {
                        	return null;
                        }
                        
                	} else if(tileEntity.getTabPage() == 2) {
                		
                		if(((Slot)this.inventorySlots.get(1)).getHasStack() || !(itemstack.getItem() instanceof IElectricItem)) {
                            if (par2 >= 2 && par2 <= 29)
                            {
                                if (!this.mergeItemStack(itemstack1, 30, 37, false))
                                {
                                    return null;
                                }
                            }
                            else if (par2 >= 30 && par2 < 38)
                            {
                            	if(!this.mergeItemStack(itemstack1, 2, 29, false)) {
                            		return null;
                            	}
                            } else {
                            	return null;
                            }
                		} else {
                            ((Slot)this.inventorySlots.get(1)).putStack(itemstack1.copy());
                            itemstack1.stackSize = 0;
                		} 
                	}
                }
                

                if (itemstack1.stackSize == 0)
                {
                    slot.putStack((ItemStack)null);
                }
                else
                {
                    slot.onSlotChanged();
                }

                if (itemstack1.stackSize == itemstack.stackSize)
                {
                    return null;
                }
            
                slot.onPickupFromSlot(par1EntityPlayer, itemstack1);
            }
            


            return itemstack;
        }
        /*
        public ItemStack transferStackInSlot(EntityPlayer par1EntityPlayer, int par2)
        {
            ItemStack itemstack = null;
            Slot slot = (Slot)this.inventorySlots.get(par2);

            if (slot != null && slot.getHasStack())
            {
                ItemStack itemstack1 = slot.getStack();
                itemstack = itemstack1.copy();

                if (par2 != 1 && par2 != 0)
                {
                        if (!this.mergeItemStack(itemstack1, 0, 1, false))
                        {
                            if (par2 >= 2 && par2 < 28)
                            {
                                if (!this.mergeItemStack(itemstack1, 28, 37, false))
                                {
                                    return null;
                                }
                            }
                            else if (par2 >= 28 && par2 < 37 && !this.mergeItemStack(itemstack1, 2, 28, false))
                            {
                                return null;
                            }
                        }
                }


                else if (!this.mergeItemStack(itemstack1, 2, 37, false))
                {                	
                    return null;
                }

                if (itemstack1.stackSize == 0)
                {
                    slot.putStack((ItemStack)null);
                }
                else
                {
                    slot.onSlotChanged();
                }

                if (itemstack1.stackSize == itemstack.stackSize)
                {
                    return null;
                }

                slot.onPickupFromSlot(par1EntityPlayer, itemstack1);
            }

            return itemstack;
        }
        */
        protected boolean mergeItemStack(ItemStack par1ItemStack, int par2, int par3, boolean par4)
        {
            boolean flag1 = false;
            int k = par2;

            if (par4)
            {
                k = par3 - 1;
            }

            Slot slot;
            ItemStack itemstack1;

            if (par1ItemStack.isStackable())
            {
                while (par1ItemStack.stackSize > 0 && (!par4 && k < par3 || par4 && k >= par2))
                {
                    slot = (Slot)this.inventorySlots.get(k);
                    itemstack1 = slot.getStack();
                    boolean flagpage = false;
                    if(slot instanceof SlotNetcraft) {
                    	if(((SlotNetcraft) slot).hidden == true) {
                    		flagpage = true;
                    	}
                    }
                    if(!flagpage) {
	                    if (itemstack1 != null && itemstack1.itemID == par1ItemStack.itemID && (!par1ItemStack.getHasSubtypes() || par1ItemStack.getItemDamage() == itemstack1.getItemDamage()) && ItemStack.areItemStackTagsEqual(par1ItemStack, itemstack1))
	                    {
	                        int l = itemstack1.stackSize + par1ItemStack.stackSize;
	
	                        if (l <= par1ItemStack.getMaxStackSize())
	                        {
	                            par1ItemStack.stackSize = 0;
	                            itemstack1.stackSize = l;
	                            slot.onSlotChanged();
	                            flag1 = true;
	                        }
	                        else if (itemstack1.stackSize < par1ItemStack.getMaxStackSize())
	                        {
	                            par1ItemStack.stackSize -= par1ItemStack.getMaxStackSize() - itemstack1.stackSize;
	                            itemstack1.stackSize = par1ItemStack.getMaxStackSize();
	                            slot.onSlotChanged();
	                            flag1 = true;
	                        }
	                    }
                    }
                    if (par4)
                    {
                        --k;
                    }
                    else
                    {
                        ++k;
                    }
                }
            }

            if (par1ItemStack.stackSize > 0)
            {
                if (par4)
                {
                    k = par3 - 1;
                }
                else
                {
                    k = par2;
                }

                while (!par4 && k < par3 || par4 && k >= par2)
                {
                    slot = (Slot)this.inventorySlots.get(k);
                    boolean flagpage = false;
                    if(slot instanceof SlotNetcraft) {
                    	if(((SlotNetcraft) slot).hidden == true) {
                    		flagpage = true;
                    	}
                    }
                    itemstack1 = slot.getStack();
                    if(!flagpage) {
	                    if (itemstack1 == null)
	                    {
	                        slot.putStack(par1ItemStack.copy());
	                        slot.onSlotChanged();
	                        par1ItemStack.stackSize = 0;
	                        flag1 = true;
	                        break;
	                    }
                    }
                    if (par4)
                    {
                        --k;
                    }
                    else
                    {
                        ++k;
                    }
                }
            }

            return flag1;
        }
        
}