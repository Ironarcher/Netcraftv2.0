package com.nitrogenegames.netcraft.machine;

import com.nitrogenegames.netcraft.Netcraft;

import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.inventory.ISidedInventory;
import net.minecraft.item.ItemStack;
import net.minecraft.item.crafting.FurnaceRecipes;
import net.minecraft.tileentity.TileEntity;

public class TileEntityNetworkFabricator extends TileEntity implements ISidedInventory
{

	private String localizedName;
	
	//slots 0,1,2 are the top 3 from left to right, slot 3 is the bottom slot
	private ItemStack[] slots = new ItemStack[4];
	
	private static final int[] slots_top = new int[]{0,1,2};
	private static final int[] slots_bottom = new int[]{3};
	private static final int[] slots_sides = new int[]{0,1,2};
	
	//speed of the machine, less is faster
	public int fabricatorSpeed = 200;
	
	//How long left before fabricated
	public int fabricatorTime;
	
	//The fabrication time for the current ingredients
	public int currentItemFabricateTime;
	
	public int getSizeInventory(){
		return this.slots.length;
	}
	
	public void setGuiDisplayName(String displayName){
		this.localizedName = displayName;
	}
	
	public String getInvName(){
		return this.isInvNameLocalized() ? this.localizedName : "container.networkFabricator";
	}
	
	public boolean isInvNameLocalized(){
		return this.localizedName != null && this.localizedName.length() > 0;
	}


	    /**
	     * Returns the stack in slot i
	     */
	    public ItemStack getStackInSlot(int par1)
	    {
	        return this.slots[par1];
	    }

	    /**
	     * Removes from an inventory slot (first arg) up to a specified number (second arg) of items and returns them in a
	     * new stack.
	     */
	    public ItemStack decrStackSize(int par1, int par2)
	    {
	        if (this.slots[par1] != null)
	        {
	            ItemStack itemstack;

	            if (this.slots[par1].stackSize <= par2)
	            {
	                itemstack = this.slots[par1];
	                this.slots[par1] = null;
	                return itemstack;
	            }
	            else
	            {
	                itemstack = this.slots[par1].splitStack(par2);

	                if (this.slots[par1].stackSize == 0)
	                {
	                    this.slots[par1] = null;
	                }

	                return itemstack;
	            }
	        }
	        else
	        {
	            return null;
	        }
	    }

	    /**
	     * When some containers are closed they call this on each slot, then drop whatever it returns as an EntityItem -
	     * like when you close a workbench GUI.
	     */
	    public ItemStack getStackInSlotOnClosing(int par1)
	    {
	        if (this.slots[par1] != null)
	        {
	            ItemStack itemstack = this.slots[par1];
	            this.slots[par1] = null;
	            return itemstack;
	        }
	        else
	        {
	            return null;
	        }
	    }

	    /**
	     * Sets the given item stack to the specified slot in the inventory (can be crafting or armor sections).
	     */
	    public void setInventorySlotContents(int par1, ItemStack par2ItemStack)
	    {
	        this.slots[par1] = par2ItemStack;

	        if (par2ItemStack != null && par2ItemStack.stackSize > this.getInventoryStackLimit())
	        {
	            par2ItemStack.stackSize = this.getInventoryStackLimit();
	        }
	    }

	@Override
	public int getInventoryStackLimit() {
		return 64;
	}

	@Override
	public boolean isUseableByPlayer(EntityPlayer entityplayer) {
		return true;
	}

	@Override
	public void openChest() {
		
	}

	@Override
	public void closeChest() {
		
	}

	public void updateEntity(){
		//if energy > 0{
		//	eu = eu - 10 or something
		//}
		/*
		if(!this.worldObj.isRemote){
			if(this.canFabricate()){
				this.currentItemFabricateTime = this.fabricatorTime = getItemFabricateTime(this.slots[3], this.slots[0], this.slots[1], this.slots[2]);
				
			}
		}
		*/
		if(this.canSmelt()) {
			this.smeltItem();
		}
	}
	
	public static int getItemFabricateTime(ItemStack baseitem, ItemStack topitemleft, ItemStack topitemmiddle, ItemStack topitemright){
		if(baseitem != null){
			if(topitemleft != null || topitemmiddle != null || topitemright != null){
				if(baseitem.itemID == ic2.api.item.Items.getItem("advancedAlloy").itemID){
					if(topitemleft.itemID == ic2.api.item.Items.getItem("electronicCircuit").itemID || topitemleft.itemID == ic2.api.item.Items.getItem("electronicCircuit").itemID || topitemleft.itemID == ic2.api.item.Items.getItem("electronicCircuit").itemID){
						return 200;
					}
				}
			//return in ticks (20 per second)
			return 0;
			}
			else{
				return 0;
			}
		} else{
			return 0;
		}
	}
	
	@Override
	public boolean isItemValidForSlot(int i, ItemStack itemstack) {
		return i == 3 ? false : true;
	}
	public boolean canSmelt() {
		try{
		if (Netcraft.getFabricatorResult(slots[0].itemID, slots[1].itemID, slots[2].itemID) != null)
        {
        	return true;
        } else {
        	return false;
        }
		} catch (Exception e) {
			return false;
		}
	}
    public void smeltItem()
    {
        if (canSmelt())
        {
            ItemStack itemstack = Netcraft.getFabricatorResult(slots[0].itemID, slots[1].itemID, slots[2].itemID);

            if (this.slots[3] == null)
            {
                this.slots[3] = itemstack.copy();
            }
            else if (this.slots[3].isItemEqual(itemstack))
            {
                slots[3].stackSize += itemstack.stackSize;
            }

            --this.slots[0].stackSize;
            --this.slots[1].stackSize;
            --this.slots[2].stackSize;

            if (this.slots[0].stackSize <= 0)
            {
                this.slots[0] = null;
            }
            if (this.slots[1].stackSize <= 0)
            {
                this.slots[1] = null;
            }
            if (this.slots[2].stackSize <= 0)
            {
                this.slots[2] = null;
            }
        }
    }
    
	@Override
	public int[] getAccessibleSlotsFromSide(int var1) {
		return var1 == 0 ? slots_bottom : (var1 == 1 ? slots_top : slots_sides);
	}

	@Override
	public boolean canInsertItem(int i, ItemStack itemstack, int j) {
		return this.isItemValidForSlot(i, itemstack);
	}

	@Override
	public boolean canExtractItem(int i, ItemStack itemstack, int j) {
		return j != 0 || i != 0 || i != 1 || i != 2;
	}

	
}
